{"version":3,"sources":["Components/Form/Placeholders.jsx","Components/Form/Input_helpers.jsx","Components/Form/Textarea_helpers.jsx","Components/Main/Profile.jsx","Components/Form/iterator.jsx","Components/Main/Edu.jsx","Components/Main/Work.jsx","Components/Optional/Certificates.jsx","Components/Optional/Interests.jsx","Components/Optional/Skills.jsx","Components/Optional/Languages.jsx","Components/Options/Options.jsx","App.js","index.js"],"names":["Placeholders","address","city","state","zip","yearStart","yearEnd","schoolName","schoolTitle","name","position","achievements","date","Input","props","t","id","cn","val","ph","onSubmit","onChange","min","max","checked","type","className","value","placeholder","onClick","Textarea","key","s","style","rows","Profile","title","email","profile","phone","location","handleFieldChange","bind","handleFieldChangeWithObj","e","target","this","setState","nameValue","includes","splitName","split","stateName","stateProp","prevState","splitVal","handleFieldChangeWithManualApproach","React","Component","IteratorComponent","valInfo","onAdd","onRmv","IteratorComponent2","IteratorSkills","Edu","num","education","yearStart1","yearEnd1","schoolName1","schoolTitle1","addNewStateObj","rmvLatestStateObj","arr","index","copyArray","preventDefault","len","length","splice","toggleVisibility","iteratorComponent","iterableComponent","map","edu","class","Work","experience","companyName1","companyPos1","notes","handleFieldChangeWithArrinArr","addNewNote","rmvLatestNote","indexIsolator","filter","x","stateInArr","arrIndex","console","log","concat","test","join","parseInt","exp","componentDidMount","iterableNotes","note","i","idNote","Certificates","certificates","c","Interests","interests","interest","Skills","skills","skill","addSkill","rmvSkill","document","getElementById","Object","assign","updateSkills","label","iteratorSkills","Langs","langNum","langLevel","1","2","3","4","5","langs","lang","level","levelInWords","levelNum","checkSkillLevel","iteratorComponent2","l","Options","languages","toggleSidebarVisibility","handleCheckbox","display","event","sidebar","button","classList","toggle","App","disabled","handleSubmit","printCV","tx","getElementsByTagName","setAttribute","scrollHeight","addEventListener","OnInput","height","window","print","autoComplete","ReactDOM","render","StrictMode"],"mappings":"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","file":"static/js/main.b81d9bf1.chunk.js","sourcesContent":["\nexport const Placeholders = {\n    // placeholder names for general info inputs\n    name: 'Type your name',\n    title: 'Type your title position',\n    email: 'Enter your email',\n    profile: '[Insert profile summary about yourself]',\n    phone: '(XXX)-XXX-XXXX',\n    location: [{\n        address: 'street name',\n        city: 'city, ',\n        state: 'state, ',\n        zip: 'zip code'\n    }],\n    education: [{\n        yearStart: 'start',\n        yearEnd: 'end',\n        schoolName: 'Name of school',\n        schoolTitle: 'Your major/Student position',\n    }],\n    //placeholder for experience info inputs\n    experiences: [{\n        yearStart: 'start',\n        yearEnd: 'end',\n        name: 'Name of company',\n        position: 'Your job position',\n        achievements: '[Insert text here]',\n    }],\n    certificates: {\n        date: '[Insert date]',\n        name: '[Insert your certification here]'\n    },\n    interests: ['[Insert your interests here]']\n}","import React from 'react';\n\nconst Input = (props) => {\n    const { t, id, cn, name, val, ph, onSubmit, onChange, min, max, checked } = props;\n    return (\n        <input\n            type={t}\n            id={id}\n            className={cn}\n            name={name}\n            value={val}\n            placeholder={ph}\n            onClick={onSubmit}\n            onChange={onChange}\n            min={min}\n            max={max}\n            checked={checked}>\n        </input>\n    );\n}\n\nexport default Input;","import React from 'react';\n\nconst Textarea = (props) => {\n    const { key, s, t, id, cn, name, val, ph, onChange } = props;\n    return (\n        <textarea\n            key={key}\n            style={s}\n            type={t}\n            id={id}\n            className={cn}\n            name={name}\n            value={val}\n            placeholder={ph}\n            onChange={onChange}\n            rows=\"1\">\n        </textarea>\n    );\n}\n\nexport default Textarea;","import React from 'react';\n\n//Components\nimport { Placeholders } from '../Form/Placeholders';\nimport Input from '../Form/Input_helpers';\nimport Textarea from '../Form/Textarea_helpers';\n\nclass Profile extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = ({\n            name: 'Reaver Nayrb Saboteur',\n            title: 'Web Developer',\n            email: 'law911012eqw@gmail.com',\n            profile: `The purpose of this text is to confirm  whether the auto resize textarea \n            will work. Just making sure this paragraph will reach the third line \n            which now it is with the help of ES6 template string.`,\n            phone: '(919)-191-9191',\n            location: {\n                address: '8888 Gallagher Rd., ',\n                city: 'Jacksonville',\n                state: ' NC',\n                zip: ' 28546',\n            },\n        });\n\n        //binding methods to this\n        this.handleFieldChange = this.handleFieldChange.bind(this);\n        this.handleFieldChangeWithObj = this.handleFieldChangeWithObj.bind(this);\n    }\n\n    //update state throughtout input onchange\n    handleFieldChange(e) {\n        const { name, value } = e.target;\n        this.setState({ [name]: value });\n    }\n    //A seperate field change handler that updates the state with obj property onChange\n    handleFieldChangeWithObj(e) {\n        let nameValue = e.target.name;\n\n        //Splitting the value of the one line input by comma to assigned in on proper states\n        if (!nameValue.includes('.')) {\n            let val = e.target.value;\n            let splitVal = val.split(',');\n            this.setState(prevState => ({\n                [`${nameValue}`]: {\n                    ...prevState.[nameValue],\n                    city: splitVal[0] || '',\n                    state: splitVal[1] || '',\n                    zip: splitVal[2] || ''\n                }\n            }))\n        }\n        //Setting state with new value\n        //Only used for one property at a time\n        else {\n            let splitName = nameValue.split('.');\n            let stateName = splitName[0];\n            let stateProp = splitName[1];\n            this.setState(prevState => ({\n                [`${stateName}`]: {\n                    ...prevState.[stateName],\n                    [`${stateProp}`]: e.target.value\n                }\n            }))\n        }\n    }\n    render() {\n        return (\n            <div id=\"profile-container\">\n                <div id=\"profile-upper-left\">\n                    <div id=\"profile-user\">\n                        <Textarea\n                            t=\"text\"\n                            id=\"profile-name\"\n                            cn=\"cv-input\"\n                            name=\"name\"\n                            val={this.state.name}\n                            ph={Placeholders.name}\n                            onChange={this.handleFieldChange}\n                        />\n                        <Input\n                            t=\"text\"\n                            id=\"profile-title\"\n                            cn=\"cv-input\"\n                            name=\"title\"\n                            val={this.state.title}\n                            ph={Placeholders.title}\n                            onChange={this.handleFieldChange}\n                        />\n                    </div>\n                    <div>\n                        <Textarea\n                            // ref={c=>this.textarea=c}\n                            t=\"text\"\n                            id=\"profile-summary\"\n                            cn=\"cv-input\"\n                            name=\"profile\"\n                            val={this.state.profile}\n                            ph={Placeholders.profile}\n                            onChange={this.handleFieldChange}\n                        />\n                    </div>\n                </div>\n                <div id=\"profile-upper-right\">\n                    <label>Contact Info</label>\n                    <Input\n                        t=\"text\"\n                        id=\"profile-phone\"\n                        cn=\"ci-inputs\"\n                        name=\"phone\"\n                        val={this.state.phone}\n                        ph={Placeholders.phone}\n                        onChange={this.handleFieldChangeWithManualApproach}\n                    />\n                    <Input\n                        t=\"email\"\n                        id=\"profile-email\"\n                        cn=\"ci-inputs\"\n                        name=\"email\"\n                        val={this.state.email}\n                        ph={Placeholders.email}\n                        onChange={this.handleFieldChange}\n                    />\n                    <Textarea\n                        t=\"text\"\n                        id=\"profile-address\"\n                        cn=\"ci-inputs\"\n                        name=\"location.address\"\n                        val={this.state.location.address}\n                        ph={`${Placeholders.location[0].address}`}\n                        onChange={this.handleFieldChangeWithObj}\n                    />\n                    <Textarea\n                        t=\"text\"\n                        id=\"profile-location\"\n                        cn=\"ci-inputs\"\n                        name=\"location\"\n                        val={`${this.state.location.city},${this.state.location.state},${this.state.location.zip}`}\n                        ph={`${Placeholders.location[0].city}${Placeholders.location[0].state}${Placeholders.location[0].zip}`}\n                        onChange={this.handleFieldChangeWithObj}\n                    />\n                </div>\n            </div>\n        );\n    }\n}\n\nexport default Profile;","import React from 'react';\nimport Input from '../Form/Input_helpers';\n\nexport const IteratorComponent = (props) => {\n    const { id, valInfo, onAdd, onRmv } = props;\n    return (\n        <div className=\"add-info\">\n            <div className=\"add-btn-container\">\n                <button id={id} className=\"add-rmv-btns\" onClick={onAdd}>+</button>\n                <p className=\"add-info-text\">{`Add ${valInfo}`}</p>\n            </div>\n            <div className=\"rmv-btn-container\">\n                <button id={id} className=\"add-rmv-btns\" onClick={onRmv}>-</button>\n                <p className=\"add-info-text\">{`Remove last ${valInfo}`}</p>\n            </div>\n        </div>\n    );\n}\n\nexport const IteratorComponent2 = (props) => {\n    const { id, valInfo, onAdd, onRmv } = props;\n    return (\n        <div className=\"add-info2\">\n            <div className=\"add-btn-container2\">\n                <button id={id} className=\"add-rmv-btns2\" onClick={onAdd}>+</button>\n                <p className=\"add-info-text\">{`Add ${valInfo}`}</p>\n            </div>\n            <div className=\"rmv-btn-container2\">\n                <button id={id} className=\"add-rmv-btns2\" onClick={onRmv}>-</button>\n                <p className=\"add-info-text\">{`Remove last ${valInfo}`}</p>\n            </div>\n        </div>\n    );\n}\n\nexport const IteratorSkills = (props) => {\n    const { val, onSubmit } = props;\n    return (\n        <form className=\"skill-addition-wrapper\">\n            <Input t=\"text\" val={val} id=\"skill-text-input\" />\n            <Input t=\"submit\" val=\"+\" id=\"skill-appender\" onSubmit={onSubmit}/>\n        </form>\n    )\n}","import React from 'react';\nimport { Placeholders } from '../Form/Placeholders';\nimport Input from '../Form/Input_helpers';\nimport { IteratorComponent } from '../Form/iterator'\n\nclass Edu extends React.Component {\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            num: 1,\n            education: [{\n                yearStart1: 2020,\n                yearEnd1: 'present',\n                schoolName1: 'University of North Carolina at Chapel Hill',\n                schoolTitle1: 'Major in Psychology'\n            }]\n        }\n        this.handleFieldChangeWithObj = this.handleFieldChangeWithObj.bind(this);\n        this.addNewStateObj = this.addNewStateObj.bind(this);\n        this.rmvLatestStateObj = this.rmvLatestStateObj.bind(this);\n    }\n\n    //A seperate field change handler that updates the state \n    //with array of obj property after onChange event\n    handleFieldChangeWithObj(e) {\n        let name = e.target.name;\n        const arr = name.split(/[.[\\]]/);\n        const splitName = name.split('.');\n        let index = arr[1];\n        let state = arr[0];\n        let stateProp = splitName[1];\n        let copyArray = [...this.state.education]; //a copy of state array\n        //update the state inside the array\n        copyArray[index] = {...copyArray[index], [`${stateProp}`]: e.target.value}\n        //replace the array of objects state with the updated one\n        this.setState({\n            [`${state}`]: copyArray\n        })\n    }\n\n    //add new state obj\n    addNewStateObj(e) {\n        e.preventDefault();\n        const len = this.state.education.length;\n        this.setState(prevState => ({\n            //default names and values for newly fresh states\n            education: [...prevState.education, {\n                [`yearStart${len + 1}`]: '',\n                [`yearEnd${len + 1}`]: '',\n                [`schoolName${len + 1}`]: '',\n                [`schoolTitle${len + 1}`]: '',\n            }]\n        }))\n    }\n\n    rmvLatestStateObj(e) {\n        e.preventDefault();\n        //remove the last item from the array of state objects\n        this.state.education.splice(this.state.education.length - 1, 1);\n        this.setState(this.state) //forces to rerender the component\n    }\n\n    render() {\n        const { toggleVisibility } = this.props;\n        const education = this.state.education;\n        const iteratorComponent = <IteratorComponent valInfo=\"Education\" onAdd={this.addNewStateObj} onRmv={this.rmvLatestStateObj}/>;\n        let iterableComponent = education.map((edu, index) => {\n            let id = index+1;\n            return (\n                <div key={id} id={`edu-info${id}`} className=\"exp-info\">\n                    <div id={`edu-dates${id}`} className=\"exp-dates\">\n                        <Input\n                            t=\"Text\"\n                            id={`edu-start-year${id}`}\n                            cn=\"exp-start-year\"\n                            name={`education[${index}].yearStart${id}`}\n                            val={edu.[`yearStart${id}`]}\n                            ph={Placeholders.education[0].yearStart}\n                            onChange={this.handleFieldChangeWithObj}\n                        />\n                        <p>-</p>\n                        <Input\n                            t=\"Text\"\n                            id={`edu-end-year${id}`}\n                            cn=\"exp-end-year\"\n                            name={`education[${index}].yearEnd${id}`}\n                            val={edu.[`yearEnd${id}`]}\n                            ph={Placeholders.education[0].yearEnd}\n                            onChange={this.handleFieldChangeWithObj}\n                        />\n                    </div>\n                    <Input\n                        t=\"Text\"\n                        id={`edu-name${id}`}\n                        cn=\"exp-name\"\n                        name={`education[${index}].schoolName${id}`}\n                        val={edu.[`schoolName${id}`]}\n                        ph={Placeholders.education[0].schoolName}\n                        onChange={this.handleFieldChangeWithObj}\n                    />\n                    <Input\n                        t=\"Text\"\n                        id={`edu-position${id}`}\n                        cn=\"exp-position\"\n                        name={`education[${index}].schoolTitle${id}`}\n                        val={edu.[`schoolTitle${id}`]}\n                        ph={Placeholders.education[0].schoolTitle}\n                        onChange={this.handleFieldChangeWithObj}\n                    />\n                </div>\n            );\n\n        })\n        return (\n            <div id={`edu-container`} className=\"main-containers\" >\n                <p class=\"exp-header-texts\">Education</p>\n                {iterableComponent}\n                {/* add and remove iterable component */}\n                {toggleVisibility ? iteratorComponent : null} \n            </div >\n        );\n    }\n}\n\nexport default Edu;","import React from 'react';\nimport { Placeholders } from '../Form/Placeholders';\nimport Input from '../Form/Input_helpers';\nimport Textarea from '../Form/Textarea_helpers';\nimport { IteratorComponent, IteratorComponent2 } from '../Form/iterator';\nimport { v4 as uuidv4 } from 'uuid';\n\nclass Work extends React.Component {\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            experience: [{\n                yearStart1: 2019,\n                yearEnd1: 'present',\n                companyName1: 'No Name Company From Somewhere',\n                companyPos1: 'Computer Programmer',\n                notes: ['Enter important finished tasks, achievement and projects that may be beneficial for your professional credentials','as','d']\n            }]\n        }\n        //bind methods to this\n        this.handleFieldChangeWithObj = this.handleFieldChangeWithObj.bind(this);\n        this.handleFieldChangeWithArrinArr = this.handleFieldChangeWithArrinArr.bind(this);\n        this.addNewStateObj = this.addNewStateObj.bind(this);\n        this.addNewNote = this.addNewNote.bind(this);\n        this.rmvLatestStateObj = this.rmvLatestStateObj.bind(this);\n        this.rmvLatestNote = this.rmvLatestNote.bind(this);\n        this.indexIsolator = this.indexIsolator.bind(this);\n    }\n\n    //A seperate field change handler that updates the state \n    //with array of obj property after onChange event\n    handleFieldChangeWithObj(e) {\n        let name = e.target.name;\n        const arr = name.split(/[.[\\]]/);\n        let splitName = name.split('.');\n        let index = arr[1];\n        let state = arr[0];\n        let stateProp = splitName[1];\n        let copyArray = [...this.state.experience]; //a copy of state array\n        //update the state inside the array\n        copyArray[index] = { ...copyArray[index], [`${stateProp}`]: e.target.value }\n        //replace the array of objects state with the updated one\n        this.setState({\n            [`${state}`]: copyArray\n        })\n    }\n    handleFieldChangeWithArrinArr(e) {\n        const name = e.target.name;\n        const value = e.target.value;\n        let arr = name.split(/[.[\\]]/);\n        arr = arr.filter (x => x !== \"\"); //clearing whitespaces\n        const index = arr[1]; //index of the first array\n        const stateInArr = arr[2];\n        const arrIndex = arr[3]; //index of arr inside state arr\n        const state = arr[0]; //state name of the first arr\n        const stateProp = `${stateInArr}[${arrIndex}]`;\n        const copyArray = [...this.state.experience[index].notes];\n        //copyArray[arrIndex] = e.target.value;\n        // this.setState({\n        //     ...this.state,\n        //     experience: [{\n        //         ...this.state.experience[index],\n        //         notes: [\n        //             ...this.state.experience[index].notes, \n        //             e.target.value\n        //         ],\n        //     }]\n        // });\n        copyArray[arrIndex] = value;\n        this.setState({\n            experience: [{\n                ...this.state.experience[index].notes, \n                copyArray\n            }]\n        })\n        console.log(copyArray);\n    }\n    //add new state obj\n    addNewStateObj(e) {\n        e.preventDefault();\n        const len = this.state.experience.length;\n        this.setState(prevState => ({\n            //default names and values for newly fresh states\n            experience: [...prevState.experience, {\n                [`yearStart${len + 1}`]: '',\n                [`yearEnd${len + 1}`]: '',\n                [`companyName${len + 1}`]: '',\n                [`companyPos${len + 1}`]: '',\n                [`notes`]: [''],\n            }]\n        }))\n    }\n    addNewNote(e) {\n        e.preventDefault();\n        const index = this.indexIsolator(e);\n        const newNote = this.state.experience[index].notes.concat('');\n        const newdasd = '';\n        // this.setState({\n        //     ...this.state,\n        //     experience: [{\n        //         ...this.state.experience[index],\n        //         notes: [\n        //             ...this.state.experience[index].notes,\n        //             newdasd\n        //         ]\n        //     }]\n        // });\n        this.setState({\n            notes: [...this.state.experience[index].notes, newdasd]\n        })\n        console.log(this.state.experience[index].notes)\n        this.setState(this.state); //forces to rerender the component\n    }\n    rmvLatestStateObj(e) {\n        e.preventDefault();\n        //remove the last item from the array of state objects\n        this.state.experience.splice(this.state.experience.length - 1, 1);\n        this.setState(this.state) //forces to rerender the component\n    }\n    rmvLatestNote(e) {\n        e.preventDefault();\n        const index = this.indexIsolator(e);\n        this.state.experience[index].notes.splice(this.state.experience[index].notes.length - 1, 1);\n        this.setState(this.state); //forces to rerender the component\n    }\n    indexIsolator(e) {\n        const id = e.target.id;\n        //isolating the index from the id\n        let index = id.split(\"\").filter(function(val){\n            return /^[\\d]+$/.test(val);\n        }).join(\"\");\n        return parseInt(index);\n    }\n    render() {\n        const { toggleVisibility } = this.props;\n        const iteratorComponent = <IteratorComponent valInfo=\"work experiences\" onAdd={this.addNewStateObj} onRmv={this.rmvLatestStateObj} />\n        let experience = this.state.experience;\n        const iterableComponent = experience.map((exp, index) => {\n            this.props.componentDidMount();\n            const id = index + 1;\n            const notes = exp.notes;\n            console.log(notes);\n            const iterableNotes = notes.map((note,i)=>{\n                const idNote = i + 1;\n                console.log(note);\n                //It's either a textarea or a para based on the value of the boolean\n                if(!toggleVisibility) {\n                    return (\n                        <p className=\"exp-notes-para\">\n                            {note}\n                        </p>\n                    );\n                }\n                return (\n                    <Textarea\n                        t=\"Text\"\n                        id={`exp${id}-task${idNote}`}\n                        cn=\"exp-notes-ta\"\n                        name={`experience[${index}].notes[${i}]`}\n                        val={note}\n                        ph={Placeholders.experiences[0].achievements}\n                        onChange={this.handleFieldChangeWithArrinArr}\n                    />\n                );\n            });\n            return (\n                <div key={id} id={`exp-info${id}`} className=\"exp-info\">\n                    <div id={`exp-dates${id}`} className=\"exp-dates\">\n                        <Input\n                            t=\"Text\"\n                            id={`exp-start-year${id}`}\n                            cn=\"exp-start-year\"\n                            name={`experience[${index}].yearStart${id}`}\n                            val={exp.[`yearStart${id}`]}\n                            ph={Placeholders.experiences[0].yearStart}\n                            onChange={this.handleFieldChangeWithObj}\n                        />\n                        <p>-</p>\n                        <Input\n                            t=\"Text\"\n                            id={`exp-end-year${id}`}\n                            cn=\"exp-end-year\"\n                            name={`experience[${index}].yearEnd${id}`}\n                            val={exp.[`yearEnd${id}`]}\n                            ph={Placeholders.experiences[0].yearEnd}\n                            onChange={this.handleFieldChangeWithObj}\n                        />\n                    </div>\n                    <Input\n                        t=\"Text\"\n                        id={`exp-name${id}`}\n                        cn=\"exp-name\"\n                        name={`experience[${index}].companyName${id}`}\n                        val={exp.[`companyName${id}`]}\n                        ph={Placeholders.experiences[0].name}\n                        onChange={this.handleFieldChangeWithObj}\n                    />\n                    <Input\n                        t=\"Text\"\n                        id={`exp-position${id}`}\n                        cn=\"exp-position\"\n                        name={`experience[${index}].companyPos${id}`}\n                        val={exp.[`companyPos${id}`]}\n                        ph={Placeholders.experiences[0].position}\n                        onChange={this.handleFieldChangeWithObj}\n                    />\n                    {iterableNotes}\n                    {toggleVisibility ? \n                    <IteratorComponent2 id={`noteManagement${index}`} valInfo=\"notes\" onAdd={this.addNewNote} onRmv={this.rmvLatestNote}/> \n                    : null}\n                </div>\n            );\n        })\n        return (\n            <div id=\"exp-container\" className=\"main-containers\">\n                <p class=\"exp-header-texts\">Work Experiences</p>\n                {iterableComponent}\n                {toggleVisibility ? iteratorComponent : null}\n            </div>\n        );\n    }\n}\n\nexport default Work;","import React from 'react';\nimport { Placeholders } from '../Form/Placeholders';\nimport Input from '../Form/Input_helpers';\nimport Textarea from '../Form/Textarea_helpers';\nimport { IteratorComponent } from '../Form/iterator';\n\nclass Certificates extends React.Component {\n    constructor(props) {\n        super(props);\n        //default values to use\n        this.state = {\n            certificates: [{\n                date: '2017-19',\n                name: '[Enter your certifications in this textarea along with the following date to the side]'\n            }]\n        }\n        this.handleFieldChangeWithObj = this.handleFieldChangeWithObj.bind(this);\n        this.addNewStateObj = this.addNewStateObj.bind(this);\n        this.rmvLatestStateObj = this.rmvLatestStateObj.bind(this);\n    }\n\n    handleFieldChangeWithObj(e) {\n        let name = e.target.name;\n        const arr = name.split(/[.[\\]]/);\n        const splitName = name.split('.');\n        let index = arr[1];\n        let state = arr[0];\n        let stateProp = splitName[1];\n        let copyArray = [...this.state.certificates]; //a copy of state array\n        //update the state inside the array\n        copyArray[index] = { ...copyArray[index], [`${stateProp}`]: e.target.value }\n        //replace the array of objects state with the updated one\n        this.setState({\n            [`${state}`]: copyArray\n        })\n    }\n        //add new state obj\n        addNewStateObj(e) {\n            e.preventDefault();\n            this.setState(prevState => ({\n                //default names and values for newly fresh states\n                certificates: [...prevState.certificates, {\n                    [`date`]: '',\n                    [`name`]: '',\n                }]\n            }))\n        }\n    \n        rmvLatestStateObj(e) {\n            e.preventDefault();\n            //remove the last item from the array of state objects\n            this.state.certificates.splice(this.state.certificates.length - 1, 1);\n            this.setState(this.state) //forces to rerender the component\n        }\n    render() {\n        const { toggleVisibility } = this.props;\n        const certificates = this.state.certificates;\n        const iteratorComponent = <IteratorComponent valInfo=\"work experiences\" onAdd={this.addNewStateObj} onRmv={this.rmvLatestStateObj} />\n        const iterableComponent = certificates.map((c, i) => {\n            this.props.componentDidMount();\n            const id = i + 1;\n            console.log(c);\n            return (\n                <div key={id} id={`certificate-info${id}`}>\n                    <Input\n                        t=\"Text\"\n                        id={`cer-date${id}`}\n                        cn=\"cer-dates\"\n                        name={`certificates[${i}].date`}\n                        val={c.date}\n                        ph={Placeholders.certificates.date}\n                        onChange={this.handleFieldChangeWithObj}\n                    />\n                    <Textarea \n                        t=\"text\"\n                        id={`cer-info${id}`}\n                        cn=\"cer-info\"\n                        name={`certificates[${i}].name`}\n                        val={c.name}\n                        ph={Placeholders.certificates.name}\n                        onChange={this.handleFieldChangeWithObj}\n                    />\n                </div>\n            );\n        })\n        return (\n            <div id={`certificates-container`} className=\"main-containers\" >\n                <p class=\"exp-header-texts\">Certificates</p>\n                {iterableComponent}\n\n                {/* add and remove iterable component */}\n                {toggleVisibility ? iteratorComponent : null}\n            </div >\n        );\n    }\n}\n\nexport default Certificates;","import React from 'react';\nimport { Placeholders } from '../Form/Placeholders';\nimport Textarea from '../Form/Textarea_helpers';\nimport { IteratorComponent } from '../Form/iterator';\n\nclass Interests extends React.Component {\n    constructor(props) {\n        super(props);\n        //default values to use\n        this.state = {\n            interests: [{\n                interest: '[Insert your interests here e.g. Music, Video games, Coding, Philosopical discussions,  etc.]'\n            }]\n        }\n        this.handleFieldChangeWithObj = this.handleFieldChangeWithObj.bind(this);\n        this.addNewStateObj = this.addNewStateObj.bind(this);\n        this.rmvLatestStateObj = this.rmvLatestStateObj.bind(this);\n    }\n    //A seperate field change handler that updates the state \n    //with array of obj property after onChange event\n    handleFieldChangeWithObj(e) {\n        let name = e.target.name;\n        const arr = name.split(/[.[\\]]/);\n        const splitName = name.split('.');\n        let index = arr[1];\n        let state = arr[0];\n        let stateProp = splitName[1];\n        let copyArray = [...this.state.interests]; //a copy of state array\n        //update the state inside the array\n        copyArray[index] = { ...copyArray[index], [`${stateProp}`]: e.target.value }\n        //replace the array of objects state with the updated one\n        this.setState({\n            [`${state}`]: copyArray\n        })\n    }\n        //add new state obj\n        addNewStateObj(e) {\n            e.preventDefault();\n            this.setState(prevState => ({\n                //default names and values for newly fresh states\n                interests: [...prevState.interests, {\n                    [`interest`]: '',\n                }]\n            }))\n        }\n    \n        rmvLatestStateObj(e) {\n            e.preventDefault();\n            //remove the last item from the array of state objects\n            this.state.interests.splice(this.state.interests.length - 1, 1);\n            this.setState(this.state) //forces to rerender the component\n        }\n    render() {\n        const { toggleVisibility } = this.props;\n        const interests = this.state.interests;\n        const iteratorComponent = <IteratorComponent valInfo=\"interests\" onAdd={this.addNewStateObj} onRmv={this.rmvLatestStateObj} />\n        const iterableComponent = interests.map((interest, i) => {\n            this.props.componentDidMount();\n            const id = i + 1;\n            if(!toggleVisibility){\n                return(\n                    <p class=\"interest-para\">{interest.interest}</p>\n                );\n            } else {\n\n            }\n            return (\n                <div key={id} id={`interest-info${id}`}>\n                    <Textarea \n                        t=\"text\"\n                        id={`interest-info${id}`}\n                        cn=\"interest-info\"\n                        name={`interests[${i}].interest`}\n                        val={interest.interest}\n                        ph={Placeholders.interests[0]}\n                        onChange={this.handleFieldChangeWithObj}\n                    />\n                </div>\n            );\n        })\n        return (\n            <div id={`interests-container`} className=\"main-containers\" >\n                <p class=\"exp-header-texts\">Interests</p>\n                {iterableComponent}\n\n                {/* add and remove iterable component */}\n                {toggleVisibility ? iteratorComponent : null}\n            </div >\n        );\n    }\n}\n\nexport default Interests;","import React from 'react'\nimport { IteratorSkills } from '../Form/iterator'\n\nclass Skills extends React.Component {\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            skills: [{\n                skill: 'React JS',\n            },\n            {\n                skill: 'Webpack',\n            }]\n        }\n\n        this.addSkill = this.addSkill.bind(this);\n        this.rmvSkill = this.rmvSkill.bind(this);\n    }\n    addSkill(e) {\n        e.preventDefault();\n        let val = document.getElementById('skill-text-input').value;\n        val   = Object.assign({}, {skill: val});\n        const updateSkills = this.state.skills.concat(val);\n        console.log(updateSkills);\n        this.setState({\n            skills: updateSkills\n        })\n    }\n    rmvSkill(e){\n        e.preventDefault();\n        const id = e.target.id;\n        const index = this.indexIsolator(id);\n        this.state.skills.splice(index,1);\n        this.setState(this.state);\n    }\n    indexIsolator(id) {\n        //isolating the index from the id\n        let index = id.split(\"\").filter(function(val){\n            return /^[\\d]+$/.test(val);\n        }).join(\"\");\n        return parseInt(index);\n    }\n    render() {\n        const { label, toggleVisibility, id } = this.props;\n        const skills = this.state.skills;\n        const iteratorSkills = <IteratorSkills onSubmit={this.addSkill}/>\n        const iterableComponent = skills.map((s, index) => {\n            console.log(skills);\n            return (\n                <div className=\"skill-wrapper\">\n                    <p className=\"skill-name\">{s.skill}</p>\n                    <button id={`round-btn${index}`} className=\"round-btn\" onClick={this.rmvSkill}>-</button>\n                </div>\n\n            );\n        })\n        return (\n            <div className=\"skills-container\" id={id}>\n                <p className=\"skill-headers\">{label}</p>\n                {iterableComponent}\n                {toggleVisibility ? iteratorSkills : null}\n            </div>\n        );\n    }\n}\n\nexport default Skills;","import React from 'react'\nimport Input from '../Form/Input_helpers';\nimport { IteratorComponent2 } from '../Form/iterator'\n\nclass Langs extends React.Component {\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            langNum: 0,\n            langLevel: {\n                1: 'Novice',\n                2: 'Average',\n                3: 'Intermediate',\n                4: 'Proficient',\n                5: 'Expert'\n            },\n            langs: [{\n                lang: 'Tagalog',\n                level: '4',\n                levelInWords: 'Proficient'\n            },\n            {\n                lang: 'English',\n                levelNum: '4',\n                levelInWords: 'Proficient'\n            }]\n        }\n\n        this.checkSkillLevel = this.checkSkillLevel.bind(this);\n    }\n\n    checkSkillLevel() {\n\n    }\n\n    handleFieldChangeWithObj(e) {\n        let name = e.target.name;\n        const arr = name.split(/[.[\\]]/);\n        let splitName = name.split('.');\n        let index = arr[1];\n        let state = arr[0];\n        let stateProp = splitName[1];\n        let copyArray = [...this.state.experience]; //a copy of state array\n        //update the state inside the array\n        copyArray[index] = { ...copyArray[index], [`${stateProp}`]: e.target.value }\n        //replace the array of objects state with the updated one\n        this.setState({\n            [`${state}`]: copyArray\n        })\n    }\n    render() {\n        const { label, toggleVisibility, id } = this.props;\n        const langs = this.state.langs;\n        const iteratorComponent2 = <IteratorComponent2 valInfo=\"skills\" onAdd={this.addNewStateObj} onRmv={this.rmvLatestStateObj} />\n        //const iterableSkillLevel = \n        const iterableComponent = langs.map((l, index) => {\n            return (\n                <div className=\"lang-wrapper\">\n                    <p className={`lang-name`}>{l.lang}<span>{`| ${l.levelInWords}`}</span></p>\n                    <div className=\"parallelogram-bar\">\n                        <div className={`parallelogram${index}-shape`}></div>\n                    </div>\n                </div>\n\n            );\n        })\n        return (\n            <div className=\"skills-container\" id={id}>\n                <p className=\"skill-headers\">{label}</p>\n                {iterableComponent}\n                {toggleVisibility ? iteratorComponent2 : null}\n            </div>\n        );\n    }\n}\n\nexport default Langs;","import React from 'react';\nimport Input from '../Form/Input_helpers';\nclass Options extends React.Component {\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            languages: true,\n            certificates: true,\n            interests: true\n        }\n        this.toggleSidebarVisibility = this.toggleSidebarVisibility.bind(this);\n        this.handleCheckbox = this.handleCheckbox.bind(this);\n    }\n    componentDidUpdate() {\n        if (document.getElementById(\"tgl-input-languages\").checked === false) {\n            document.getElementById(\"languages-container\").style.display = \"none\";\n        } else { document.getElementById(\"languages-container\").style.display = \"block\"; }\n        if (document.getElementById(\"tgl-input-certificates\").checked === false) {\n            document.getElementById(\"certificates-container\").style.display = \"none\";\n        } else { document.getElementById(\"certificates-container\").style.display = \"block\"; }\n        if (document.getElementById(\"tgl-input-interests\").checked === false) {\n            document.getElementById(\"interests-container\").style.display = \"none\";\n        } else { document.getElementById(\"interests-container\").style.display = \"block\"; }\n        \n    }\n    handleCheckbox(event) {\n        const target = event.target;\n        const name = event.target.name;\n        let value;\n        target.checked ? value = true : value = false;\n        this.setState({\n            [name]: value,\n        });\n        console.log(event);\n    }\n    toggleSidebarVisibility() {\n        const sidebar = document.getElementById('options-container');\n        const button = document.getElementById('toggle-sidebar');\n        sidebar.classList.toggle('move-to-right');\n        button.classList.toggle('rotate-button');\n\n    }\n    render() {\n        return (\n            <div id=\"options-container\" className=\"move-to-right\">\n                <button id=\"toggle-sidebar\" className=\"rotate-button\" onClick={this.toggleSidebarVisibility}>\n                    <i class=\"bi bi-arrow-left-square-fill\"></i>\n                </button>\n                <form id=\"sidebar-options\">\n                            <h2 id=\"toggle-options-text-wrapper\">\n                                <label id=\"toggle-options-text\">{\"Toggle Options\"}</label>\n                            </h2>\n                            <div id=\"tgl-languages-wrapper\" className=\"sidebar-toggle-wrappers\">\n                                <label>{\"Toggle Languages: \"}</label>\n                                <Input\n                                    t=\"checkbox\"\n                                    id=\"tgl-input-languages\"\n                                    name=\"languages\"\n                                    checked={this.state.languages}\n                                    onChange={this.handleCheckbox}\n                                />\n                            </div>\n                            <div id=\"tgl-certificates-wrapper\" className=\"sidebar-toggle-wrappers\">\n                                <label>{\"Toggle Certificates: \"}</label>\n                                <Input\n                                    t=\"checkbox\"\n                                    id=\"tgl-input-certificates\"\n                                    name=\"certificates\"\n                                    checked={this.state.certificates}\n                                    onChange={this.handleCheckbox}\n                                />\n                            </div>\n                            <div id=\"tgl-interests-wrapper\" className=\"sidebar-toggle-wrappers\">\n                                <label>{\"Toggle Interests: \"}</label>\n                                <Input\n                                    t=\"checkbox\"\n                                    id=\"tgl-input-interests\"\n                                    name=\"interests\"\n                                    checked={this.state.interests}\n                                    onChange={this.handleCheckbox}\n                                />\n                            </div>\n                        </form>\n            </div>\n        )\n    }\n}\n\nexport default Options;","import React from 'react';\n\n// Components of the app\nimport Profile from './Components/Main/Profile';\nimport Edu from './Components/Main/Edu';\nimport Work from './Components/Main/Work';\nimport Certificates from './Components/Optional/Certificates';\nimport Interests from './Components/Optional/Interests';\nimport Skills from './Components/Optional/Skills';\nimport Langs from './Components/Optional/Languages';\nimport Options from './Components/Options/Options';\nimport Input from './Components/Form/Input_helpers';\nimport './Styles/App.scss';\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      disabled: true,\n      val: 'Edit',\n    }\n\n    this.handleSubmit = this.handleSubmit.bind(this);\n    this.printCV = this.printCV.bind(this);\n  }\n\n  // Invoked every initial render of component\n  // Text area auto resize \n  componentDidMount() {\n    const tx = document.getElementsByTagName('textarea');\n    for (let i = 0; i < tx.length; i++) {\n      tx[i].setAttribute('style', 'height:' + (tx[i].scrollHeight) + 'px;overflow-y:hidden;');\n      tx[i].addEventListener(\"input\", OnInput, false);\n    }\n\n    function OnInput() {\n      this.style.height = 'auto';\n      this.style.height = (this.scrollHeight) + 'px';\n    }\n  }\n\n  handleSubmit(event) {\n    event.preventDefault();\n    let { disabled } = this.state;\n    disabled === true ? this.setState({ val: 'Save' }) : this.setState({ val: 'Edit' });\n    this.setState(prevState => ({\n      disabled: !prevState.disabled,\n    }));\n  }\n  printCV(e){\n    e.preventDefault();\n    window.print();\n  }\n  render() {\n    return (\n      <div>\n        <form id=\"main-form\" autoComplete=\"off\">\n          {/* if this is true the fieldset is enabled, otherwise it toggles to disable */}\n          <fieldset disabled={this.state.disabled}>\n            <Profile />\n            <div id=\"main-section\">\n              <div id=\"experiences-section\">\n                <Edu toggleVisibility={!this.state.disabled} />\n                <Work toggleVisibility={!this.state.disabled} componentDidMount={this.componentDidMount}/>\n                <Certificates toggleVisibility={!this.state.disabled} componentDidMount={this.componentDidMount}/>\n                <Interests toggleVisibility={!this.state.disabled} componentDidMount={this.componentDidMount}/>\n              </div>\n              <div id=\"skills-section\">\n                <Skills label=\"Skills\" toggleVisibility={!this.state.disabled}/>\n                <Langs label=\"Languages\" id=\"languages-container\" toggleVisibility={!this.state.disabled}/>\n              </div>\n            </div>\n          </fieldset>\n          <div id=\"buttons-section\">\n          <Input t=\"submit\" id=\"toggle-save\" val={this.state.val} onSubmit={this.handleSubmit} />\n          <button id=\"print-btn\" onClick={this.printCV}>Print</button>\n          </div>\n\n        </form>\n        <Options />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './Styles/index.scss';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}