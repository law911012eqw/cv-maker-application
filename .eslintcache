[{"/home/law911012eqw/github-law911012eqw/the_odin_project/prj/cv-maker-application/src/index.js":"1","/home/law911012eqw/github-law911012eqw/the_odin_project/prj/cv-maker-application/src/App.js":"2","/home/law911012eqw/github-law911012eqw/the_odin_project/prj/cv-maker-application/src/Components/Main/Profile.jsx":"3","/home/law911012eqw/github-law911012eqw/the_odin_project/prj/cv-maker-application/src/Components/Main/Edu.jsx":"4","/home/law911012eqw/github-law911012eqw/the_odin_project/prj/cv-maker-application/src/Components/Form/Input_helpers.jsx":"5","/home/law911012eqw/github-law911012eqw/the_odin_project/prj/cv-maker-application/src/Components/Main/Work.jsx":"6","/home/law911012eqw/github-law911012eqw/the_odin_project/prj/cv-maker-application/src/Components/Form/Textarea_helpers.jsx":"7","/home/law911012eqw/github-law911012eqw/the_odin_project/prj/cv-maker-application/src/Components/Form/iterator.jsx":"8","/home/law911012eqw/github-law911012eqw/the_odin_project/prj/cv-maker-application/src/Components/Optional/Skills.jsx":"9","/home/law911012eqw/github-law911012eqw/the_odin_project/prj/cv-maker-application/src/Components/Optional/Certificates.jsx":"10","/home/law911012eqw/github-law911012eqw/the_odin_project/prj/cv-maker-application/src/Components/Form/Placeholders.jsx":"11","/home/law911012eqw/github-law911012eqw/the_odin_project/prj/cv-maker-application/src/Components/Optional/Interests.jsx":"12","/home/law911012eqw/github-law911012eqw/the_odin_project/prj/cv-maker-application/src/Components/Options/Options.jsx":"13"},{"size":227,"mtime":1612658055213,"results":"14","hashOfConfig":"15"},{"size":2621,"mtime":1612918935758,"results":"16","hashOfConfig":"15"},{"size":5739,"mtime":1612828847912,"results":"17","hashOfConfig":"15"},{"size":4985,"mtime":1612830999238,"results":"18","hashOfConfig":"15"},{"size":501,"mtime":1612916580346,"results":"19","hashOfConfig":"15"},{"size":8250,"mtime":1612831003122,"results":"20","hashOfConfig":"15"},{"size":452,"mtime":1612829107880,"results":"21","hashOfConfig":"15"},{"size":1260,"mtime":1612743989766,"results":"22","hashOfConfig":"15"},{"size":2052,"mtime":1612918915738,"results":"23","hashOfConfig":"15"},{"size":4376,"mtime":1612858751391,"results":"24","hashOfConfig":"15"},{"size":959,"mtime":1612829310479,"results":"25","hashOfConfig":"15"},{"size":3573,"mtime":1612859293570,"results":"26","hashOfConfig":"15"},{"size":4120,"mtime":1612922931151,"results":"27","hashOfConfig":"15"},{"filePath":"28","messages":"29","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"30"},"1d6bxmb",{"filePath":"31","messages":"32","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"30"},{"filePath":"33","messages":"34","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"30"},{"filePath":"35","messages":"36","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"37","usedDeprecatedRules":"30"},{"filePath":"38","messages":"39","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"40","messages":"41","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"42","usedDeprecatedRules":"30"},{"filePath":"43","messages":"44","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"30"},{"filePath":"45","messages":"46","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"30"},{"filePath":"47","messages":"48","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"49","messages":"50","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"51","usedDeprecatedRules":"30"},{"filePath":"52","messages":"53","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"30"},{"filePath":"54","messages":"55","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"56","usedDeprecatedRules":"30"},{"filePath":"57","messages":"58","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"/home/law911012eqw/github-law911012eqw/the_odin_project/prj/cv-maker-application/src/index.js",[],["59","60"],"/home/law911012eqw/github-law911012eqw/the_odin_project/prj/cv-maker-application/src/App.js",[],"/home/law911012eqw/github-law911012eqw/the_odin_project/prj/cv-maker-application/src/Components/Main/Profile.jsx",[],"/home/law911012eqw/github-law911012eqw/the_odin_project/prj/cv-maker-application/src/Components/Main/Edu.jsx",["61"],"import React from 'react';\nimport { Placeholders } from '../Form/Placeholders';\nimport Input from '../Form/Input_helpers';\nimport { IteratorComponent } from '../Form/iterator'\n\nclass Edu extends React.Component {\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            num: 1,\n            education: [{\n                yearStart1: 2020,\n                yearEnd1: 'present',\n                schoolName1: 'University of North Carolina at Chapel Hill',\n                schoolTitle1: 'Major in Psychology'\n            }]\n        }\n        this.handleFieldChangeWithObj = this.handleFieldChangeWithObj.bind(this);\n        this.addNewStateObj = this.addNewStateObj.bind(this);\n        this.rmvLatestStateObj = this.rmvLatestStateObj.bind(this);\n    }\n\n    //A seperate field change handler that updates the state \n    //with array of obj property after onChange event\n    handleFieldChangeWithObj(e) {\n        let name = e.target.name;\n        const arr = name.split(/[.\\[\\]]/);\n        const splitName = name.split('.');\n        let index = arr[1];\n        let state = arr[0];\n        let stateProp = splitName[1];\n        let copyArray = [...this.state.education]; //a copy of state array\n        //update the state inside the array\n        copyArray[index] = {...copyArray[index], [`${stateProp}`]: e.target.value}\n        //replace the array of objects state with the updated one\n        this.setState({\n            [`${state}`]: copyArray\n        })\n    }\n\n    //add new state obj\n    addNewStateObj(e) {\n        e.preventDefault();\n        const len = this.state.education.length;\n        this.setState(prevState => ({\n            //default names and values for newly fresh states\n            education: [...prevState.education, {\n                [`yearStart${len + 1}`]: '',\n                [`yearEnd${len + 1}`]: '',\n                [`schoolName${len + 1}`]: '',\n                [`schoolTitle${len + 1}`]: '',\n            }]\n        }))\n    }\n\n    rmvLatestStateObj(e) {\n        e.preventDefault();\n        //remove the last item from the array of state objects\n        this.state.education.splice(this.state.education.length - 1, 1);\n        this.setState(this.state) //forces to rerender the component\n    }\n\n    render() {\n        const { toggleVisibility } = this.props;\n        const education = this.state.education;\n        const iteratorComponent = <IteratorComponent valInfo=\"Education\" onAdd={this.addNewStateObj} onRmv={this.rmvLatestStateObj}/>;\n        let iterableComponent = education.map((edu, index) => {\n            let id = index+1;\n            return (\n                <div key={id} id={`edu-info${id}`} className=\"exp-info\">\n                    <div id={`edu-dates${id}`} className=\"exp-dates\">\n                        <Input\n                            t=\"Text\"\n                            id={`edu-start-year${id}`}\n                            cn=\"exp-start-year\"\n                            name={`education[${index}].yearStart${id}`}\n                            val={edu.[`yearStart${id}`]}\n                            ph={Placeholders.education[0].yearStart}\n                            onChange={this.handleFieldChangeWithObj}\n                        />\n                        <p>-</p>\n                        <Input\n                            t=\"Text\"\n                            id={`edu-end-year${id}`}\n                            cn=\"exp-end-year\"\n                            name={`education[${index}].yearEnd${id}`}\n                            val={edu.[`yearEnd${id}`]}\n                            ph={Placeholders.education[0].yearEnd}\n                            onChange={this.handleFieldChangeWithObj}\n                        />\n                    </div>\n                    <Input\n                        t=\"Text\"\n                        id={`edu-name${id}`}\n                        cn=\"exp-name\"\n                        name={`education[${index}].schoolName${id}`}\n                        val={edu.[`schoolName${id}`]}\n                        ph={Placeholders.education[0].schoolName}\n                        onChange={this.handleFieldChangeWithObj}\n                    />\n                    <Input\n                        t=\"Text\"\n                        id={`edu-position${id}`}\n                        cn=\"exp-position\"\n                        name={`education[${index}].schoolTitle${id}`}\n                        val={edu.[`schoolTitle${id}`]}\n                        ph={Placeholders.education[0].schoolTitle}\n                        onChange={this.handleFieldChangeWithObj}\n                    />\n                </div>\n            );\n\n        })\n        return (\n            <div id={`edu-container`} className=\"main-containers\" >\n                <p class=\"exp-header-texts\">Education</p>\n                {iterableComponent}\n                {/* add and remove iterable component */}\n                {toggleVisibility ? iteratorComponent : null} \n            </div >\n        );\n    }\n}\n\nexport default Edu;","/home/law911012eqw/github-law911012eqw/the_odin_project/prj/cv-maker-application/src/Components/Form/Input_helpers.jsx",[],"/home/law911012eqw/github-law911012eqw/the_odin_project/prj/cv-maker-application/src/Components/Main/Work.jsx",["62","63"],"import React from 'react';\nimport { Placeholders } from '../Form/Placeholders';\nimport Input from '../Form/Input_helpers';\nimport Textarea from '../Form/Textarea_helpers';\nimport { IteratorComponent, IteratorComponent2 } from '../Form/iterator';\nimport { v4 as uuidv4 } from 'uuid';\n\nclass Work extends React.Component {\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            experience: [{\n                yearStart1: 2019,\n                yearEnd1: 'present',\n                companyName1: 'No Name Company From Somewhere',\n                companyPos1: 'Computer Programmer',\n                note: ['Enter important finished tasks, achievement and projects that may be beneficial for your professional credentials','as','d']\n            }]\n        }\n        //bind methods to this\n        this.handleFieldChangeWithObj = this.handleFieldChangeWithObj.bind(this);\n        this.addNewStateObj = this.addNewStateObj.bind(this);\n        this.addNewNote = this.addNewNote.bind(this);\n        this.rmvLatestStateObj = this.rmvLatestStateObj.bind(this);\n        this.rmvLatestNote = this.rmvLatestNote.bind(this);\n        this.indexIsolator = this.indexIsolator.bind(this);\n    }\n\n    //A seperate field change handler that updates the state \n    //with array of obj property after onChange event\n    handleFieldChangeWithObj(e) {\n        let name = e.target.name;\n        const arr = name.split(/[.\\[\\]]/);\n        let splitName = name.split('.');\n        let index = arr[1];\n        let state = arr[0];\n        let stateProp = splitName[1];\n        let copyArray = [...this.state.experience]; //a copy of state array\n        //update the state inside the array\n        copyArray[index] = { ...copyArray[index], [`${stateProp}`]: e.target.value }\n        //replace the array of objects state with the updated one\n        this.setState({\n            [`${state}`]: copyArray\n        })\n        console.log(stateProp, state);\n    }\n    // handleFieldChangeWithArrinArr(e) {\n\n    // }\n    //add new state obj\n    addNewStateObj(e) {\n        e.preventDefault();\n        const len = this.state.experience.length;\n        this.setState(prevState => ({\n            //default names and values for newly fresh states\n            experience: [...prevState.experience, {\n                [`yearStart${len + 1}`]: '',\n                [`yearEnd${len + 1}`]: '',\n                [`companyName${len + 1}`]: '',\n                [`companyPos${len + 1}`]: '',\n                [`note`]: '',\n            }]\n        }))\n    }\n    addNewNote(e) {\n        e.preventDefault();\n        const index = this.indexIsolator(e);\n        const newNote = this.state.experience[index].note.concat('');\n        //const note = [...this.state.experience[index].note];\n        this.setState({\n            ...this.state,\n            experience: [{\n                ...this.state.experience,\n                note: [\n                    ...this.state.experience[index].note,\n                    newNote\n                ]\n            }]\n        });\n        // let copyArray = [...this.state.experience]; //a copy of state array\n        // //update the state inside the array\n        // copyArray[index] = { ...copyArray[index], [`${stateProp}`]: e.target.value }\n        // //replace the array of objects state with the updated one\n        // this.setState({\n        //     [`${state}`]: copyArray\n        // })\n        console.log(this.state.experience[index].note)\n        this.setState(this.state); //forces to rerender the component\n    }\n    rmvLatestStateObj(e) {\n        e.preventDefault();\n        //remove the last item from the array of state objects\n        this.state.experience.splice(this.state.experience.length - 1, 1);\n        this.setState(this.state) //forces to rerender the component\n    }\n    rmvLatestNote(e) {\n        e.preventDefault();\n        const index = this.indexIsolator(e);\n        this.state.experience[index].note.splice(this.state.experience[index].note.length - 1, 1);\n        this.setState(this.state); //forces to rerender the component\n    }\n    indexIsolator(e) {\n        const id = e.target.id;\n        //isolating the index from the id\n        let index = id.split(\"\").filter(function(val){\n            return /^[\\d]+$/.test(val);\n        }).join(\"\");\n        return parseInt(index);\n    }\n    render() {\n        const { toggleVisibility } = this.props;\n        const iteratorComponent = <IteratorComponent valInfo=\"work experiences\" onAdd={this.addNewStateObj} onRmv={this.rmvLatestStateObj} />\n        let experience = this.state.experience;\n        let iterableComponent = experience.map((exp, index) => {\n            const id = index + 1;\n            const notes = exp.note;\n            console.log(notes);\n            const iterableNotes = notes.map((note,i)=>{\n                const idNote = i + 1;\n                console.log(note);\n                //It's either a textarea or a para based on the value of the boolean\n                if(!toggleVisibility) {\n                    return (\n                        <p className=\"exp-notes-para\">\n                            {note}\n                        </p>\n                    );\n                }\n                return (\n                    <Textarea\n                        t=\"Text\"\n                        id={`exp${id}-task${idNote}`}\n                        cn=\"exp-notes-ta\"\n                        name={`exp[${index}].note${index}[${i}]`}\n                        val={note}\n                        ph={Placeholders.experiences[0].achievements}\n                        onChange={this.handleFieldChangeWithObj}\n                    />\n                );\n            });\n            return (\n                <div key={id} id={`exp-info${id}`} className=\"exp-info\">\n                    <div id={`exp-dates${id}`} className=\"exp-dates\">\n                        <Input\n                            t=\"Text\"\n                            id={`exp-start-year${id}`}\n                            cn=\"exp-start-year\"\n                            name={`experience[${index}].yearStart${id}`}\n                            val={exp.[`yearStart${id}`]}\n                            ph={Placeholders.experiences[0].yearStart}\n                            onChange={this.handleFieldChangeWithObj}\n                        />\n                        <p>-</p>\n                        <Input\n                            t=\"Text\"\n                            id={`exp-end-year${id}`}\n                            cn=\"exp-end-year\"\n                            name={`experience[${index}].yearEnd${id}`}\n                            val={exp.[`yearEnd${id}`]}\n                            ph={Placeholders.experiences[0].yearEnd}\n                            onChange={this.handleFieldChangeWithObj}\n                        />\n                    </div>\n                    <Input\n                        t=\"Text\"\n                        id={`exp-name${id}`}\n                        cn=\"exp-name\"\n                        name={`experience[${index}].companyName${id}`}\n                        val={exp.[`companyName${id}`]}\n                        ph={Placeholders.experiences[0].name}\n                        onChange={this.handleFieldChangeWithObj}\n                    />\n                    <Input\n                        t=\"Text\"\n                        id={`exp-position${id}`}\n                        cn=\"exp-position\"\n                        name={`experience[${index}].companyPos${id}`}\n                        val={exp.[`companyPos${id}`]}\n                        ph={Placeholders.experiences[0].position}\n                        onChange={this.handleFieldChangeWithObj}\n                    />\n                    {iterableNotes}\n                    {toggleVisibility ? \n                    <IteratorComponent2 id={`noteManagement${index}`} valInfo=\"notes\" onAdd={this.addNewNote} onRmv={this.rmvLatestNote}/> \n                    : null}\n                </div>\n            );\n        })\n        return (\n            <div id=\"exp-container\" className=\"main-containers\">\n                <p class=\"exp-header-texts\">Work Experiences</p>\n                {iterableComponent}\n                {toggleVisibility ? iteratorComponent : null}\n            </div>\n        );\n    }\n}\n\nexport default Work;","/home/law911012eqw/github-law911012eqw/the_odin_project/prj/cv-maker-application/src/Components/Form/Textarea_helpers.jsx",[],"/home/law911012eqw/github-law911012eqw/the_odin_project/prj/cv-maker-application/src/Components/Form/iterator.jsx",[],"/home/law911012eqw/github-law911012eqw/the_odin_project/prj/cv-maker-application/src/Components/Optional/Skills.jsx",["64","65"],"/home/law911012eqw/github-law911012eqw/the_odin_project/prj/cv-maker-application/src/Components/Optional/Certificates.jsx",["66"],"import React from 'react';\nimport { Placeholders } from '../Form/Placeholders';\nimport Input from '../Form/Input_helpers';\nimport Textarea from '../Form/Textarea_helpers';\nimport { IteratorComponent } from '../Form/iterator';\n\nclass Certificates extends React.Component {\n    constructor(props) {\n        super(props);\n        //default values to use\n        this.state = {\n            certificates: [{\n                date: '2017-19',\n                name: ''\n            }]\n        }\n        this.handleFieldChangeWithObj = this.handleFieldChangeWithObj.bind(this);\n        this.addNewStateObj = this.addNewStateObj.bind(this);\n        this.rmvLatestStateObj = this.rmvLatestStateObj.bind(this);\n    }\n    // componentDidMount() {\n    //     const tx = document.getElementsByTagName('textarea');\n    //     for (let i = 0; i < tx.length; i++) {\n    //       tx[i].setAttribute('style', 'height:' + (tx[i].scrollHeight) + 'px;overflow-y:hidden;');\n    //       tx[i].addEventListener(\"input\", OnInput, false);\n    //     }\n    \n    //     function OnInput() {\n    //       this.style.height = 'auto';\n    //       this.style.height = (this.scrollHeight) + 'px';\n    //     }\n    //   }\n    //A seperate field change handler that updates the state \n    //with array of obj property after onChange event\n    handleFieldChangeWithObj(e) {\n        let name = e.target.name;\n        const arr = name.split(/[.\\[\\]]/);\n        const splitName = name.split('.');\n        let index = arr[1];\n        let state = arr[0];\n        let stateProp = splitName[1];\n        let copyArray = [...this.state.certificates]; //a copy of state array\n        //update the state inside the array\n        copyArray[index] = { ...copyArray[index], [`${stateProp}`]: e.target.value }\n        console.log(stateProp);\n        console.log(state);\n        //replace the array of objects state with the updated one\n        this.setState({\n            [`${state}`]: copyArray\n        })\n    }\n        //add new state obj\n        addNewStateObj(e) {\n            e.preventDefault();\n            this.setState(prevState => ({\n                //default names and values for newly fresh states\n                certificates: [...prevState.certificates, {\n                    [`date`]: '',\n                    [`name`]: '',\n                }]\n            }))\n        }\n    \n        rmvLatestStateObj(e) {\n            e.preventDefault();\n            //remove the last item from the array of state objects\n            this.state.certificates.splice(this.state.certificates.length - 1, 1);\n            this.setState(this.state) //forces to rerender the component\n        }\n    render() {\n        const { toggleVisibility } = this.props;\n        const certificates = this.state.certificates;\n        console.log(certificates);\n        const iteratorComponent = <IteratorComponent valInfo=\"work experiences\" onAdd={this.addNewStateObj} onRmv={this.rmvLatestStateObj} />\n        const iterableComponent = certificates.map((c, i) => {\n            this.props.componentDidMount();\n            const id = i + 1;\n            console.log(c);\n            return (\n                <div key={id} id={`certificate-info${id}`}>\n                    <Input\n                        t=\"Text\"\n                        id={`cer-date${id}`}\n                        cn=\"cer-dates\"\n                        name={`certificates[${i}].date`}\n                        val={c.date}\n                        ph={Placeholders.certificates.date}\n                        onChange={this.handleFieldChangeWithObj}\n                    />\n                    <Textarea \n                        t=\"text\"\n                        id={`cer-info${id}`}\n                        cn=\"cer-info\"\n                        name={`certificates[${i}].name`}\n                        val={c.name}\n                        ph={Placeholders.certificates.name}\n                        onChange={this.handleFieldChangeWithObj}\n                    />\n                </div>\n            );\n        })\n        return (\n            <div id={`certificates-container`} className=\"main-containers\" >\n                <p class=\"exp-header-texts\">Certificates</p>\n                {iterableComponent}\n\n                {/* add and remove iterable component */}\n                {toggleVisibility ? iteratorComponent : null}\n            </div >\n        );\n    }\n}\n\nexport default Certificates;","/home/law911012eqw/github-law911012eqw/the_odin_project/prj/cv-maker-application/src/Components/Form/Placeholders.jsx",[],"/home/law911012eqw/github-law911012eqw/the_odin_project/prj/cv-maker-application/src/Components/Optional/Interests.jsx",["67"],"import React from 'react';\nimport { Placeholders } from '../Form/Placeholders';\nimport Textarea from '../Form/Textarea_helpers';\nimport { IteratorComponent } from '../Form/iterator';\n\nclass Interests extends React.Component {\n    constructor(props) {\n        super(props);\n        //default values to use\n        this.state = {\n            interests: [{\n                interest: '[Insert your interests here e.g. Music, Psychology, Philosophy, etc.]'\n            }]\n        }\n        this.handleFieldChangeWithObj = this.handleFieldChangeWithObj.bind(this);\n        this.addNewStateObj = this.addNewStateObj.bind(this);\n        this.rmvLatestStateObj = this.rmvLatestStateObj.bind(this);\n    }\n    //A seperate field change handler that updates the state \n    //with array of obj property after onChange event\n    handleFieldChangeWithObj(e) {\n        let name = e.target.name;\n        const arr = name.split(/[.\\[\\]]/);\n        const splitName = name.split('.');\n        let index = arr[1];\n        let state = arr[0];\n        let stateProp = splitName[1];\n        let copyArray = [...this.state.interests]; //a copy of state array\n        //update the state inside the array\n        copyArray[index] = { ...copyArray[index], [`${stateProp}`]: e.target.value }\n        console.log(stateProp);\n        //replace the array of objects state with the updated one\n        this.setState({\n            [`${state}`]: copyArray\n        })\n    }\n        //add new state obj\n        addNewStateObj(e) {\n            e.preventDefault();\n            this.setState(prevState => ({\n                //default names and values for newly fresh states\n                interests: [...prevState.interests, {\n                    [`interest`]: '',\n                }]\n            }))\n        }\n    \n        rmvLatestStateObj(e) {\n            e.preventDefault();\n            //remove the last item from the array of state objects\n            this.state.interests.splice(this.state.interests.length - 1, 1);\n            this.setState(this.state) //forces to rerender the component\n        }\n    render() {\n        const { toggleVisibility } = this.props;\n        const interests = this.state.interests;\n        console.log(interests);\n        const iteratorComponent = <IteratorComponent valInfo=\"interests\" onAdd={this.addNewStateObj} onRmv={this.rmvLatestStateObj} />\n        const iterableComponent = interests.map((interest, i) => {\n            this.props.componentDidMount();\n            const id = i + 1;\n            if(!toggleVisibility){\n                return(\n                    <p class=\"interest-para\">{interest.interest}</p>\n                );\n            } else {\n\n            }\n            return (\n                <div key={id} id={`interest-info${id}`}>\n                    <Textarea \n                        t=\"text\"\n                        id={`interest-info${id}`}\n                        cn=\"interest-info\"\n                        name={`interests[${i}].interest`}\n                        val={interest.interest}\n                        ph={Placeholders.interests[0]}\n                        onChange={this.handleFieldChangeWithObj}\n                    />\n                </div>\n            );\n        })\n        return (\n            <div id={`interests-container`} className=\"main-containers\" >\n                <p class=\"exp-header-texts\">Interests</p>\n                {iterableComponent}\n\n                {/* add and remove iterable component */}\n                {toggleVisibility ? iteratorComponent : null}\n            </div >\n        );\n    }\n}\n\nexport default Interests;","/home/law911012eqw/github-law911012eqw/the_odin_project/prj/cv-maker-application/src/Components/Options/Options.jsx",[],{"ruleId":"68","replacedBy":"69"},{"ruleId":"70","replacedBy":"71"},{"ruleId":"72","severity":1,"message":"73","line":28,"column":35,"nodeType":"74","messageId":"75","endLine":28,"endColumn":36,"suggestions":"76"},{"ruleId":"77","severity":1,"message":"78","line":6,"column":16,"nodeType":"79","messageId":"80","endLine":6,"endColumn":22},{"ruleId":"72","severity":1,"message":"73","line":34,"column":35,"nodeType":"74","messageId":"75","endLine":34,"endColumn":36,"suggestions":"81"},{"ruleId":"77","severity":1,"message":"82","line":2,"column":8,"nodeType":"79","messageId":"80","endLine":2,"endColumn":13},{"ruleId":"72","severity":1,"message":"73","line":34,"column":35,"nodeType":"74","messageId":"75","endLine":34,"endColumn":36,"suggestions":"83"},{"ruleId":"72","severity":1,"message":"73","line":37,"column":35,"nodeType":"74","messageId":"75","endLine":37,"endColumn":36,"suggestions":"84"},{"ruleId":"72","severity":1,"message":"73","line":23,"column":35,"nodeType":"74","messageId":"75","endLine":23,"endColumn":36,"suggestions":"85"},"no-native-reassign",["86"],"no-negated-in-lhs",["87"],"no-useless-escape","Unnecessary escape character: \\[.","Literal","unnecessaryEscape",["88","89"],"no-unused-vars","'uuidv4' is defined but never used.","Identifier","unusedVar",["90","91"],"'Input' is defined but never used.",["92","93"],["94","95"],["96","97"],"no-global-assign","no-unsafe-negation",{"messageId":"98","fix":"99","desc":"100"},{"messageId":"101","fix":"102","desc":"103"},{"messageId":"98","fix":"104","desc":"100"},{"messageId":"101","fix":"105","desc":"103"},{"messageId":"98","fix":"106","desc":"100"},{"messageId":"101","fix":"107","desc":"103"},{"messageId":"98","fix":"108","desc":"100"},{"messageId":"101","fix":"109","desc":"103"},{"messageId":"98","fix":"110","desc":"100"},{"messageId":"101","fix":"111","desc":"103"},"removeEscape",{"range":"112","text":"113"},"Remove the `\\`. This maintains the current functionality.","escapeBackslash",{"range":"114","text":"115"},"Replace the `\\` with `\\\\` to include the actual backslash character.",{"range":"116","text":"113"},{"range":"117","text":"115"},{"range":"118","text":"113"},{"range":"119","text":"115"},{"range":"120","text":"113"},{"range":"121","text":"115"},{"range":"122","text":"113"},{"range":"123","text":"115"},[991,992],"",[991,991],"\\",[1422,1423],[1422,1422],[817,818],[817,817],[1405,1406],[1405,1405],[913,914],[913,913]]